#
# Makefile: Commands to simplify development and releases
#

# You can set these variable on the command line.
PYTHON = python{{ cookiecutter.python_version }}

# Where everything lives

root_dir = $(realpath .)
app_dir = $(root_dir)/src/{{ cookiecutter.app_slug }}

python := $(root_dir)/venv/bin/python3
pip := $(root_dir)/venv/bin/pip3
django := $(python) $(root_dir)/manage.py

{%- if cookiecutter.use_piptools %}
pip-compile := $(root_dir)/venv/bin/pip-compile
pip-sync := $(root_dir)/venv/bin/pip-sync
{%- endif %}
{%- if cookiecutter.code_checker in ["flake8", "pylama"] %}
checker := $(root_dir)/venv/bin/{{ cookiecutter.code_checker }}
{%- endif %}
{%- if cookiecutter.use_black == "y" %}
black := $(root_dir)/venv/bin/black
{%- endif %}
{%- if cookiecutter.use_isort == "y" %}
isort := $(root_dir)/venv/bin/isort
{%- endif %}
{%- if cookiecutter.test_runner == "pytest" %}
pytest := $(root_dir)/venv/bin/pytest
{%- endif %}
{%- if cookiecutter.use_coverage == "y" %}
coverage := $(root_dir)/venv/bin/coverage
{%- endif %}
{%- if cookiecutter.use_bumpversion == "y" %}
bumpversion := $(root_dir)/venv/bin/bump2version
{%- endif %}
twine := $(root_dir)/venv/bin/twine


commit_opts :={% if cookiecutter.sign_commits %} --gpg-sign{% endif %}
upload_opts := --skip-existing{% if cookiecutter.sign_uploads %} --sign{% endif %}
{%- if cookiecutter.test_runner == "pytest" %}
{%- set opts = [] %}
{%- if cookiecutter.code_checker == "flake8" %}{{ opts.append("--flake8") or "" }}{% endif %}
{%- if cookiecutter.code_checker == "pylama" %}{{ opts.append("--pylama") or "" }}{% endif %}
{%- if cookiecutter.use_black == "y" %}{{ opts.append("--black") or "" }}{% endif %}
{%- if cookiecutter.use_isort == "y" %}{{ opts.append("--isort") or "" }}{% endif %}
pytest_opts := {{ opts|join(" ")}}
{%- endif %}

.PHONY: help
help:
	@echo "Please use 'make <target>' where <target> is one of:"
	@echo ""
	@echo "  help                 to show this list"
	@echo "  clean-build          to clean the files and directories generated by previous builds"
	@echo "  clean-tests          to clean the directories created during testing"
{%- if cookiecutter.use_coverage == "y" %}
	@echo "  clean-coverage       to clean the test coverage data and reports"
{%- endif %}
	@echo "  clean-venv           to clean the virtualenv"
	@echo "  clean                to clean everything"
	@echo
	@echo "  build                to build the package"
{%- if cookiecutter.use_coverage == "y" %}
	@echo "  coverage             to measure the test coverage"
{%- endif %}
{%- if cookiecutter.use_bumpversion == "y" %}
	@echo "  major                to update the version number for a major release, e.g. 2.1 to 3.0"
{%- endif %}
	@echo "  messages             to run the makemessages and compilemessages management commands"
	@echo "  migrate              to run migrate management command"
	@echo "  migrations           to run makemigrations management command"
{%- if cookiecutter.use_bumpversion == "y" %}
	@echo "  minor                to update the version number for a minor release, e.g. 2.1 to 2.2"
	@echo "  nightly              to build a development version of the package"
	@echo "  patch                to update the version number for a patch release, e.g. 2.1.1 to 2.1.2"
{%- endif %}
{%- if cookiecutter.use_black == "y" or cookiecutter.use_isort == "y" %}
	@echo "  pretty               to reformat the app source code"
{%- endif %}
	@echo "  runserver            to run the Django demo site"
	@echo "  test                 to run the tests during development"
	@echo "  upload               to upload a release to PyPI repository"
	@echo "  venv                 to create the virtualenv and install dependencies"
	@echo "  verify               to verify the tests pass for all supported environments"
	@echo

.PHONY: clean-build
clean-build:
	rm -rf build
	rm -rf src/*.egg-info

.PHONY: clean-tests
clean-tests:
	rm -rf .tox
{%- if cookiecutter.test_runner == "pytest" %}
	rm -rf .pytest_cache
{%- endif %}
{%- if cookiecutter.use_coverage == "y" %}

.PHONY: clean-coverage
clean-coverage:
	rm -rf .coverage
	rm -rf reports/coverage
{%- endif %}

.PHONY: clean-venv
clean-venv:
	rm -rf venv

.PHONE: clean-versions
clean-versions:
	rm requirements.txt

.PHONY: clean
clean: clean-build clean-tests clean-venv clean-versions

.PHONY: build
build: clean-build
	$(python) setup.py sdist bdist_wheel

{% if cookiecutter.use_coverage == "y" -%}
.PHONY: coverage
coverage:
    {%- if cookiecutter.test_runner == "django" %}
	$(coverage) run --rcfile=setup.cfg manage.py test library_project
	$(coverage) html --rcfile=setup.cfg
	{%- else %}
	pytest --cov={{ cookiecutter.app_slug }} --cov-config=setup.cfg --cov-report html
	{%- endif %}
{%- endif %}

.PHONY: major
major:
	$(bumpversion) major

.PHONY: messages
messages:
	cd $(app_dir) && $(django) makemessages --no-obsolete --all && $(django) compilemessages

.PHONY: migrate
migrate:
	$(django) migrate

.PHONY: migrations
migrations:
	$(django) makemigrations

.PHONY: minor
minor:
	$(bumpversion) minor

.PHONY: nightly
nightly: clean-build
	$(python) setup.py egg_info --tag-build .dev- --tag-date sdist

.PHONY: patch
patch:
	$(bumpversion) patch

{% if cookiecutter.use_black == "y" or cookiecutter.use_isort == "y" -%}
.PHONY: pretty
pretty:
	{% if cookiecutter.use_black == "y" %}$(black) src{% endif %}
	{% if cookiecutter.use_isort == "y" %}$(isort) src{% endif %}
{%- endif %}

.PHONY: runserver
runserver: venv
	$(django) migrate
	$(django) runserver

.PHONY: test
test:
{%- if cookiecutter.test_runner == "django" %}
	$(django) test {{ cookiecutter.app_slug }}
{%- else %}
	pytest $(pytest_opts)
{%- endif %}

.PHONY: upload
upload:
	$(twine) upload $(upload_opts) dist/*

venv:
	$(PYTHON) -m venv venv
	$(pip) install --upgrade pip setuptools wheel
{%- if cookiecutter.use_piptools == "y" %}
	$(pip) install pip-tools
	$(pip-sync)
{%- else %}
	$(pip) install -r requirements.txt
{%- endif %}

.PHONY: verify
verify: test
	tox

# include any local makefiles
-include *.mk
